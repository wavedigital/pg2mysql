// This file was generated by counterfeiter
package pg2mysqlfakes

import (
	"sync"

	"github.com/wavedigital/pg2mysql"
)

type FakeVerifierWatcher struct {
	TableVerificationDidStartStub        func(tableName string)
	tableVerificationDidStartMutex       sync.RWMutex
	tableVerificationDidStartArgsForCall []struct {
		tableName string
	}
	TableVerificationDidFinishStub        func(tableName string, missingRows int64, missingIDs []string)
	tableVerificationDidFinishMutex       sync.RWMutex
	tableVerificationDidFinishArgsForCall []struct {
		tableName   string
		missingRows int64
		missingIDs  []string
	}
	TableVerificationDidFinishWithErrorStub        func(tableName string, err error)
	tableVerificationDidFinishWithErrorMutex       sync.RWMutex
	tableVerificationDidFinishWithErrorArgsForCall []struct {
		tableName string
		err       error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVerifierWatcher) TableVerificationDidStart(tableName string) {
	fake.tableVerificationDidStartMutex.Lock()
	fake.tableVerificationDidStartArgsForCall = append(fake.tableVerificationDidStartArgsForCall, struct {
		tableName string
	}{tableName})
	fake.recordInvocation("TableVerificationDidStart", []interface{}{tableName})
	fake.tableVerificationDidStartMutex.Unlock()
	if fake.TableVerificationDidStartStub != nil {
		fake.TableVerificationDidStartStub(tableName)
	}
}

func (fake *FakeVerifierWatcher) TableVerificationDidStartCallCount() int {
	fake.tableVerificationDidStartMutex.RLock()
	defer fake.tableVerificationDidStartMutex.RUnlock()
	return len(fake.tableVerificationDidStartArgsForCall)
}

func (fake *FakeVerifierWatcher) TableVerificationDidStartArgsForCall(i int) string {
	fake.tableVerificationDidStartMutex.RLock()
	defer fake.tableVerificationDidStartMutex.RUnlock()
	return fake.tableVerificationDidStartArgsForCall[i].tableName
}

func (fake *FakeVerifierWatcher) TableVerificationDidFinish(tableName string, missingRows int64, missingIDs []string) {
	var missingIDsCopy []string
	if missingIDs != nil {
		missingIDsCopy = make([]string, len(missingIDs))
		copy(missingIDsCopy, missingIDs)
	}
	fake.tableVerificationDidFinishMutex.Lock()
	fake.tableVerificationDidFinishArgsForCall = append(fake.tableVerificationDidFinishArgsForCall, struct {
		tableName   string
		missingRows int64
		missingIDs  []string
	}{tableName, missingRows, missingIDsCopy})
	fake.recordInvocation("TableVerificationDidFinish", []interface{}{tableName, missingRows, missingIDsCopy})
	fake.tableVerificationDidFinishMutex.Unlock()
	if fake.TableVerificationDidFinishStub != nil {
		fake.TableVerificationDidFinishStub(tableName, missingRows, missingIDs)
	}
}

func (fake *FakeVerifierWatcher) TableVerificationDidFinishCallCount() int {
	fake.tableVerificationDidFinishMutex.RLock()
	defer fake.tableVerificationDidFinishMutex.RUnlock()
	return len(fake.tableVerificationDidFinishArgsForCall)
}

func (fake *FakeVerifierWatcher) TableVerificationDidFinishArgsForCall(i int) (string, int64, []string) {
	fake.tableVerificationDidFinishMutex.RLock()
	defer fake.tableVerificationDidFinishMutex.RUnlock()
	return fake.tableVerificationDidFinishArgsForCall[i].tableName, fake.tableVerificationDidFinishArgsForCall[i].missingRows, fake.tableVerificationDidFinishArgsForCall[i].missingIDs
}

func (fake *FakeVerifierWatcher) TableVerificationDidFinishWithError(tableName string, err error) {
	fake.tableVerificationDidFinishWithErrorMutex.Lock()
	fake.tableVerificationDidFinishWithErrorArgsForCall = append(fake.tableVerificationDidFinishWithErrorArgsForCall, struct {
		tableName string
		err       error
	}{tableName, err})
	fake.recordInvocation("TableVerificationDidFinishWithError", []interface{}{tableName, err})
	fake.tableVerificationDidFinishWithErrorMutex.Unlock()
	if fake.TableVerificationDidFinishWithErrorStub != nil {
		fake.TableVerificationDidFinishWithErrorStub(tableName, err)
	}
}

func (fake *FakeVerifierWatcher) TableVerificationDidFinishWithErrorCallCount() int {
	fake.tableVerificationDidFinishWithErrorMutex.RLock()
	defer fake.tableVerificationDidFinishWithErrorMutex.RUnlock()
	return len(fake.tableVerificationDidFinishWithErrorArgsForCall)
}

func (fake *FakeVerifierWatcher) TableVerificationDidFinishWithErrorArgsForCall(i int) (string, error) {
	fake.tableVerificationDidFinishWithErrorMutex.RLock()
	defer fake.tableVerificationDidFinishWithErrorMutex.RUnlock()
	return fake.tableVerificationDidFinishWithErrorArgsForCall[i].tableName, fake.tableVerificationDidFinishWithErrorArgsForCall[i].err
}

func (fake *FakeVerifierWatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tableVerificationDidStartMutex.RLock()
	defer fake.tableVerificationDidStartMutex.RUnlock()
	fake.tableVerificationDidFinishMutex.RLock()
	defer fake.tableVerificationDidFinishMutex.RUnlock()
	fake.tableVerificationDidFinishWithErrorMutex.RLock()
	defer fake.tableVerificationDidFinishWithErrorMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeVerifierWatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pg2mysql.VerifierWatcher = new(FakeVerifierWatcher)
